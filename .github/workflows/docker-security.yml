# Stackr Security-First Docker CI/CD Pipeline
#
# PURPOSE: Secure Docker build and deployment pipeline with vulnerability scanning
# RELATED: Dockerfile, security hardening, production deployment
# TAGS: github-actions, docker, security, ci-cd, vulnerability-scanning

name: Docker Security Build & Deploy

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Docker build with security checks
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
      security-events: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Security build arguments
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Security scan during build
          provenance: true
          sbom: true

  # Security testing
  security-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security linter
        uses: python-security/bandit-action@v1
        with:
          path: python/
          level: low
          format: json
          output: bandit-report.json

      - name: Run Safety check for Python dependencies
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Integration testing with security focus
  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    services:
      # Mock Bitcoin node for testing
      bitcoind:
        image: bitcoinknots/bitcoin:latest
        options: >-
          --health-cmd "bitcoin-cli -testnet getblockchaininfo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 18332:18332
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          # Test Docker container security
          docker run --rm --name stackr-test \
            -e BITCOIN_RPC_HOST=localhost \
            -e BITCOIN_RPC_PORT=18332 \
            -e BITCOIN_RPC_USER=test \
            -e BITCOIN_RPC_PASSWORD=test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} &

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:8000/health

          # Test security headers
          curl -I http://localhost:8000/ | grep -E "(X-Content-Type-Options|X-Frame-Options|X-XSS-Protection)"

          # Cleanup
          docker stop stackr-test

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, security-test, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying secure build ${{ github.sha }} to production"
          # Add your deployment logic here
          # Example: kubectl apply, docker-compose up, etc.
